name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  update-dependencies:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.4.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Check for updates
        run: |
          echo "ðŸ“¦ Checking for outdated dependencies..."
          pnpm outdated || true

      - name: Create issue for outdated dependencies
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            
            try {
              const outdated = execSync('pnpm outdated --format json', { encoding: 'utf-8' });
              const packages = JSON.parse(outdated);
              
              if (Object.keys(packages).length > 0) {
                let body = '## Outdated Dependencies\n\n';
                body += 'The following dependencies have updates available:\n\n';
                body += '| Package | Current | Wanted | Latest |\n';
                body += '|---------|---------|--------|--------|\n';
                
                for (const [name, info] of Object.entries(packages)) {
                  body += `| ${name} | ${info.current} | ${info.wanted} | ${info.latest} |\n`;
                }
                
                body += '\n---\n';
                body += 'Please review and update dependencies as needed.';
                
                // Check if issue already exists
                const issues = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  labels: 'dependencies'
                });
                
                const existingIssue = issues.data.find(issue => 
                  issue.title.includes('Dependency Updates Available')
                );
                
                if (existingIssue) {
                  // Update existing issue
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: existingIssue.number,
                    body: body
                  });
                  console.log('Updated existing issue');
                } else {
                  // Create new issue
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: 'ðŸ“¦ Dependency Updates Available',
                    body: body,
                    labels: ['dependencies', 'maintenance']
                  });
                  console.log('Created new issue');
                }
              } else {
                console.log('All dependencies are up to date!');
              }
            } catch (error) {
              console.log('No outdated dependencies or error:', error.message);
            }
